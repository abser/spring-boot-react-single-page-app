{"version":3,"sources":["Upload.js","App.js","serviceWorker.js","index.js"],"names":["Upload","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inProgress","uploadedNRIC","e","_this2","preventDefault","formData","FormData","file","document","querySelector","append","files","axios","post","headers","Content-Type","then","res","console","log","setState","data","nrics","length","row","forEach","nric","push","react_default","a","createElement","method","encType","type","name","id","Button","onClick","handleFileUpload","bind","showUploadedNRIC","React","Component","withRouter","App","toggle","assertThisInitialized","isOpen","BrowserRouter","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","Collapse","navbar","Nav","className","NavItem","NavLink","tag","Link","to","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.51fa035b.chunk.js","sourcesContent":["\nimport React from 'react';\nimport {Button} from 'reactstrap';\nimport {withRouter} from 'react-router-dom';\nimport axios from 'axios'\n\nclass Upload extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            inProgress: false,\n            uploadedNRIC: null\n        }\n    }\n\n    handleFileUpload(e) {\n        e.preventDefault();\n        const formData = new FormData();\n        let file = document.querySelector('#my_file');\n        formData.append(\"my_file\", file.files[0]);\n        axios.post('api/file_upload', formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        }).then(res => {\n            console.log(res);\n            this.setState({\n                uploadedNRIC: res.data\n            })\n        })\n    }\n\n    showUploadedNRIC(nrics) {\n        if(nrics.length > 0 ) {\n            const row = [];\n            nrics.forEach(nric => {\n                row.push(<tr>\n                    <td>{nric}</td>\n                    <td>...</td>\n                </tr>)\n            });\n            return(\n                <table>\n                    <tr>\n                        <th>Uploaded Data</th>\n                    </tr>\n                    {row}\n                </table>\n            )\n        }\n    }\n    \n    render() {\n        return (\n            <div>\n                <form method=\"POST\" encType=\"multipart/form-data\">\n                    <input type=\"file\" name=\"my_file\" id=\"my_file\" />\n                    <Button type=\"submit\" onClick={this.handleFileUpload.bind(this)}>Upload</Button>\n                </form>\n                <p>{this.state.uploadedNRIC ? this.showUploadedNRIC(this.state.uploadedNRIC) : null}</p>\n                <div>\n                    \n                </div>\n            </div>\n        )\n    }\n\n}\nexport default withRouter(Upload);","\nimport React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\nimport Upload from './Upload';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink\n} from 'reactstrap';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      isOpen: false\n    };\n  }\n\n  toggle() {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n\n  render() {\n    return (\n      <Router>\n        <div>\n          <Navbar color=\"light\" light expand=\"md\">\n            <NavbarBrand href=\"/\">LifeChain</NavbarBrand>\n            <NavbarToggler onClick={this.toggle} />\n            <Collapse isOpen={this.state.isOpen} navbar>\n              <Nav className=\"ml-auto\" navbar>\n                <NavItem>\n                  <NavLink tag={Link} to=\"/upload\">Upload</NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink tag={Link} to=\"/help\">Help</NavLink>\n                </NavItem>\n              </Nav>\n            </Collapse>\n          </Navbar>\n{/* React Component Routes */}\n          <Route exact path=\"/\" component={()=> null} />\n          <Route path=\"/upload\" component={Upload} />\n          <Route path=\"/help\" component={()=> {\n            return(<div>Help? Email to abser.it@gmail.com </div>)\n          }} />\n        </div>\n      </Router>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}